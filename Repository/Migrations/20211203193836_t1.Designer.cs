// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

namespace Repository.Migrations
{
    [DbContext(typeof(MasterDbContext))]
    [Migration("20211203193836_t1")]
    partial class t1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("Core.Entitys.OrderForms.AccessNumberForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserFormsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserFormsId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessNumberForm");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.AppealFaileds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AllegedlyDecidedId")
                        .HasColumnType("char(36)");

                    b.Property<int>("AppealStatus")
                        .HasColumnType("int");

                    b.Property<string>("Cause")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProcessingTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AllegedlyDecidedId");

                    b.HasIndex("Id");

                    b.ToTable("AppealFaileds");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.Collects", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserFormsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserFormsId");

                    b.HasIndex("UserId", "UserFormsId");

                    b.ToTable("Collects");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.FormType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BriefIntroduction")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAudit")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("FormType");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.UserForms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Audit")
                        .HasColumnType("int");

                    b.Property<Guid?>("AuditId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AuditTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactWay")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DetailedAddress")
                        .HasColumnType("longtext");

                    b.Property<Guid>("FormTypeId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NotAuditCause")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderEvaluate")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("OrderTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<string>("SponsorEvaluate")
                        .HasColumnType("longtext");

                    b.Property<int>("UserFormStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormTypeId");

                    b.HasIndex("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("UserForms");
                });

            modelBuilder.Entity("Core.Entitys.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactWay")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FreezeTime")
                        .HasColumnType("datetime");

                    b.Property<string>("HeadPortrait")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Core.Entitys.Userinfo.FreezeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cause")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("FormId")
                        .HasColumnType("char(36)");

                    b.Property<int>("FrozenType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ThawingTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FreezeDetail");
                });

            modelBuilder.Entity("Core.Entitys.Userinfo.UserProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CashPledge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("FreezeMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModifiedId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Usable")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProperty");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.AccessNumberForm", b =>
                {
                    b.HasOne("Core.Entitys.OrderForms.UserForms", "UserForms")
                        .WithMany("AccessNumber")
                        .HasForeignKey("UserFormsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entitys.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserForms");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.AppealFaileds", b =>
                {
                    b.HasOne("Core.Entitys.User", "AllegedlyDecided")
                        .WithMany()
                        .HasForeignKey("AllegedlyDecidedId");

                    b.Navigation("AllegedlyDecided");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.Collects", b =>
                {
                    b.HasOne("Core.Entitys.OrderForms.UserForms", "UserForms")
                        .WithMany()
                        .HasForeignKey("UserFormsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entitys.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserForms");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.UserForms", b =>
                {
                    b.HasOne("Core.Entitys.OrderForms.FormType", "FormType")
                        .WithMany()
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entitys.User", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("FormType");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Core.Entitys.Userinfo.FreezeDetail", b =>
                {
                    b.HasOne("Core.Entitys.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entitys.Userinfo.UserProperty", b =>
                {
                    b.HasOne("Core.Entitys.User", "User")
                        .WithOne("UserProperty")
                        .HasForeignKey("Core.Entitys.Userinfo.UserProperty", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entitys.OrderForms.UserForms", b =>
                {
                    b.Navigation("AccessNumber");
                });

            modelBuilder.Entity("Core.Entitys.User", b =>
                {
                    b.Navigation("UserProperty");
                });
#pragma warning restore 612, 618
        }
    }
}
